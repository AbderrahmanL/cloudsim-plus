{
  "name": "CloudSim Plus",
  "tagline": "CloudSim Plus: A highly extensible and easier-to-use Framework for Modeling and Simulation of Cloud Computing Infrastructures and Services",
  "body": "<a id=\"top\"></a>\r\n\r\n[![Build Status](https://img.shields.io/travis/manoelcampos/cloudsim-plus/master.svg)](https://travis-ci.org/manoelcampos/cloudsim-plus) [![Dependency Status](https://www.versioneye.com/user/projects/5841f4dfb1c38c0aa1cd46f1/badge.svg?style=flat-square)](https://www.versioneye.com/user/projects/5841f4dfb1c38c0aa1cd46f1) [![Codacy Badge](https://api.codacy.com/project/badge/Grade/3f132b184d5e475dbbcd356ee84499fc)](https://www.codacy.com/app/manoelcampos/cloudsim-plus?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=manoelcampos/cloudsim-plus&amp;utm_campaign=Badge_Grade) [![Codacy Badge](https://api.codacy.com/project/badge/Coverage/3f132b184d5e475dbbcd356ee84499fc)](https://www.codacy.com/app/manoelcampos/cloudsim-plus?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=manoelcampos/cloudsim-plus&amp;utm_campaign=Badge_Coverage) [![GPL licensed](https://img.shields.io/badge/license-GPL-blue.svg)](http://www.gnu.org/licenses/gpl-3.0)\r\n\r\n<p align=\"center\">\r\n<b><a href=\"#overview\">Overview</a></b>\r\n|\r\n<b><a href=\"#contributions\">Exclusive Features</a></b>\r\n|\r\n<b><a href=\"#projects-modules\">Modules</a></b>\r\n|\r\n<b><a href=\"#how-to-use-cloudsim-plus\">How to use</a></b>\r\n|\r\n<b><a href=\"#a-minimal-simulation-example\">Examples</a></b>\r\n|\r\n<b><a href=\"#documentation-and-help\">Docs and Help</a></b>\r\n|\r\n<b><a href=\"#why-care\">Why should I care?</a></b>\r\n|\r\n<b><a href=\"#why-another-fork\">Why another fork?</a></b>\r\n|\r\n<b><a href=\"#differences\">Differences from CloudSim</a></b>\r\n|\r\n<b><a href=\"#general-features\">General Features</a></b>\r\n|\r\n<b><a href=\"#publications\">Publications</a></b>\r\n|\r\n<b><a href=\"#license\">License</a></b>\r\n|\r\n<b><a href=\"#contributing\">Contribution Guide</a></b>\r\n</p>\r\n\r\n# Overview\r\n\r\nCloudSim Plus is a highly extensible simulation framework that enables modeling, simulation, and experimentation of emerging Cloud computing \r\ninfrastructures and application services, allowing its users to focus on specific system design issues that they want to investigate, \r\nwithout getting concerned about the low level details related to Cloud-based infrastructures and services.\r\n \r\nCloud computing is the leading technology for delivery of reliable, secure, fault-tolerant, sustainable, and scalable computational services.\r\nFor assurance of such characteristics in cloud systems under development, it is required timely, repeatable, \r\nand controllable methodologies for evaluation of new cloud applications and policies, before actual development of cloud products. \r\nBecause utilization of real testbeds limits the experiments to the scale of the testbed and makes \r\nthe reproduction of results an extremely difficult undertaking, simulation may be used.\r\nAccordingly, the current project is a suitable tool to rapidly develop such simulation scenarios and run them quickly, in an usual and modest PC. \r\n\r\nCloudSim Plus is a fork of [CloudSim 3](https://github.com/Cloudslab/cloudsim/tree/20a7a55e537181489fcb9a2d42a3e539db6c0318) \r\nthat was re-engineered primarily to avoid code duplication for improved [code reusability](https://en.wikipedia.org/wiki/Code_reuse)\r\nand to ensure compliance with software engineering principles and recommendations, aiming to provide a more extensible, \r\nless [coupled](https://en.wikipedia.org/wiki/Coupling_(computer_programming)), \r\nmore [cohesive](https://en.wikipedia.org/wiki/Cohesion_(computer_science)) cloud simulation framework.  \r\n\r\nIt focuses on usage of software engineering standards and recommendations \r\nsuch as [Design Patterns](https://en.wikipedia.org/wiki/Software_design_pattern), \r\n[SOLID principles](https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)) \r\nand other ones such as [KISS](https://en.wikipedia.org/wiki/KISS_principle) \r\nand [DRY](https://pt.wikipedia.org/wiki/Don't_repeat_yourself).\r\n\r\nCloudSim Plus is developed through a partnership among the Systems, Security and Image Communication Lab of [Instituto de Telecomunicações (IT, Portugal)](http://www.it.pt), \r\nthe [Universidade da Beira Interior (UBI, Portugal)](http://www.ubi.pt) and the \r\n[Instituto Federal de Educação Ciência e Tecnologia do Tocantins (IFTO, Brazil)](http://www.ifto.edu.br). \r\nIt is supported by the Portuguese [Fundação para a Ciência e a Tecnologia (FCT)](https://www.fct.pt) \r\nand by the [Brazilian foundation Coordenação de Aperfeiçoamento de Pessoal de Nível Superior (CAPES)](http://www.capes.gov.br).\r\n\r\nThe original CloudSim project is developed in [the Cloud Computing and Distributed Systems (CLOUDS) Laboratory](http://cloudbus.org/), \r\nat [the Computer Science and Software Engineering Department](http://www.csse.unimelb.edu.au/) of [the University of Melbourne](http://www.unimelb.edu.au/).\r\n\r\n<p align=\"right\"><a href=\"#top\">:arrow_up:</a></p>\r\n\r\n\r\n<a id=\"contributions\"></a>\r\n# Exclusive Features\r\n\r\nCloudSim Plus provides a lot of exclusive features, ranging from the most basic ones that are missing in CloudSim to advanced features that enable implementation of more realistic simulation scenarios. \r\n\r\n- [Parallel execution of simulations](cloudsim-plus-examples/src/main/java/org/cloudsimplus/examples/ParallelSimulationsExample.java), allowing several simulations to be run simultaneously, in a isolated way, inside a multi-core computer.\r\n- [Listeners](/cloudsim-plus-examples/src/main/java/org/cloudsimplus/examples/listeners/) objects to enable simulation monitoring.\r\n- [Builders](/cloudsim-plus/src/main/java/org/cloudsimplus/builders/) to enable creating multiple simulation objects with same configuration.\r\n- TableBuilder objects that are used in all examples and enable printing simulation results in different formats such as ASCII Table, CSV or HTML. It shows simulation results in perfectly aligned tables, including data units and additional data. See the last line of the [BasicFirstExample](/cloudsim-plus-examples/src/main/java/org/cloudsimplus/examples/BasicFirstExample.java) constructor to see how it is easy to print results.\r\n- It is a strongly object-oriented framework that creates relationships among classes and allows chained calls such as `cloudlet.getVm().getHost().getDatacenter()`.\r\n  And guess what? You don't even have to worry about `NullPointerException` when making such a chained call because CloudSim Plus uses the [Null Object Design Pattern](https://en.wikipedia.org/wiki/Null_Object_pattern) to avoid that.\r\n- [Delay creation of submitted Cloudlets](/cloudsim-plus-examples/src/main/java/org/cloudsimplus/examples/DynamicCloudletsArrival1.java), enabling simulation of dynamic arrival of tasks (see issue #11 for more details).\r\n- [Allow dynamic creation of VMs and Cloudlets without requiring creation of Datacenter Brokers at runtime](/cloudsim-plus-examples/src/main/java/org/cloudsimplus/examples/DynamicCreationOfVmsAndCloudlets.java), enabling VMs to be created on-demand according to arrived cloudlets (see issue #43 for more details).\r\n- Classes and interfaces to allow implementation of [heuristics](http://en.wikipedia.org/wiki/Heuristic) such as \r\n  [Tabu Search](http://en.wikipedia.org/wiki/Tabu_search), [Simulated Annealing](http://en.wikipedia.org/wiki/Simulated_annealing), \r\n  [Ant Colony Systems](http://en.wikipedia.org/wiki/Ant_colony_optimization_algorithms) and so on. See an [example using Simulated Annealing here](/cloudsim-plus-examples/src/main/java/org/cloudsimplus/examples/DatacenterBrokerHeuristicExample.java).\r\n- [Implementation of the Completely Fair Scheduler](/cloudsim-plus-examples/src/main/java/org/cloudsimplus/examples/LinuxCompletelyFairSchedulerExample.java) used in recent version of the Linux Kernel.\r\n- Simpler constructors to instantiate simulation objects, making it less confusing to use the framework (see issue #30 for more details).\r\n- Throughout documentation update, improvement and extension.\r\n- Improved class hierarchy, modules and package structure that is easier to understand.\r\n- As it is usual to extend framework classes to provide some specific behaviours for your simulations, you will find a totally refactored code that follows clean code programming, [SOLID](https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)), [Design Patterns](https://en.wikipedia.org/wiki/Software_design_pattern) and several other software engineering principles and practices. By this way, it will be far easier to understand the code and implement the feature you want.\r\n- Integration Tests to increase framework accuracy by testing entire simulation scenarios.\r\n- Updated to Java 8, making extensive use of [Lambda Expressions](http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/index.html) and [Streams API](http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html) to improve efficiency and provide a cleaner and easier-to-maintain code.\r\n\r\n\r\n# Project's Modules\r\n\r\nCloudSim Plus has a simpler structure that can be understood right away. It consists of 5 modules, 2 of which are new, as presented below.\r\n\r\n- [cloudsim-plus](cloudsim-plus): the CloudSim Plus cloud simulation framework API that is used by all other modules. \r\n  It is the main module that contains the simulation framework implementation and is the only\r\n  one you need to write your cloud simulations. \r\n- [cloudsim-plus-examples](cloudsim-plus-examples): includes a series of different examples, since minimal simulation scenarios using basic \r\n  CloudSim Plus features, to complex scenarios using workloads from trace files or Vm migration examples. This is an excelent start point \r\n  for learning how to build cloud simulations using CloudSim Plus.\r\n- [cloudsim-plus-testbeds](cloudsim-plus-testbeds): a new module that implements some simulation testbeds in a repeatable manner, \r\n  allowing a researcher to execute several simulation runs for a given experiment and collect statistical data using a scientific approach. \r\n  It represents real testbeds implemented to assess CloudSim Plus features, providing relevant results. The module provides a set of class which \r\n  can be used by other researchers to implement their own comprehensive testbeds. Different from the examples module that aims just\r\n  to show how to use CloudSim Plus features, this module includes more complex simulation scenarios concerned in providing\r\n  scientifically valid results. \r\n- [cloudsim-plus-benchmarks](cloudsim-plus-benchmarks): a new module used just internally to implement micro benchmarks using the \r\n  [Java Microbenchmark Harness framework (JMH)](http://openjdk.java.net/projects/code-tools/jmh/) to enable measuring critical methods of the \r\n  CloudSim Plus API that have a high impact in the simulation framework performance.\r\n- [distribution](distribution): a module used just to build jar files for distribution of packaged CloudSim Plus binaries, documentation and source code.   \r\n\r\n<p align=\"right\"><a href=\"#top\">:arrow_up:</a></p>\r\n\r\n\r\n# How to use CloudSim Plus \r\nCloudSim Plus is a Maven project with some modules. The easier way to use the project is relying on some IDE such as NetBeans, Eclipse or IntelliJ IDEA. \r\nAccordingly, you can just check the gif below or see the complete instructions in the next sub-sections.\r\n\r\n![Download and running CloudSim Plus Example using NetBeans](https://github.com/manoelcampos/cloudsim-plus/raw/master/cloudsim-plus-netbeans.gif)\r\n\r\nThere is a high quality video version of this gif available in [YouTube](https://youtu.be/hvFJtvrkCNI).\r\n\r\nBut if you are such a \"terminal person\", the sub-section below shows the instructions.\r\n\r\n## By means of command line (if you don't like or don't want to use an IDE)\r\nConsidering that you have [git](https://git-scm.com) and [maven](http://maven.apache.org) installed on your operating system, \r\ndownload the project source by cloning the repositosy using the command `git clone https://github.com/manoelcampos/cloudsim-plus.git` \r\nat a terminal. \r\n\r\nThe project has a [bash script](script/bootstrap.sh) that you can use to build and run CloudSim Plus examples. \r\nThis is a script for Unix-like system such as Linux, FreeBDS and Mac OSX.\r\n\r\nTo run some example type the command: `sh script/bootstrap.sh package.ExampleClassName`.\r\nFor instance, to run the CloudSimExample0 you can type: `sh script/bootstrap.sh org.cloudbus.cloudsim.examples.CloudSimExample0`. \r\n\r\nThe script checks if it is required to build the project, using maven in this case, making sure to download all dependencies. \r\nTo see what examples are available, just navigate through the [examples directory](/cloudsim-plus-examples/src/main/java/).\r\nTo see more script options, run it without any parameter.  \r\n \r\n## By means of an IDE (the easier way to just take a look or to create your own simulations)\r\nThe easier way to use the project is relying on some IDE such as [NetBeans](http://netbeans.org), [Eclipse](http://eclipse.org) \r\nor [IntelliJ IDEA](http://jetbrains.com/idea/).\r\nBelow are the steps to start using the project:\r\n\r\n- Download the project sources using the download button on top of this page or clone it using `git clone https://github.com/manoelcampos/cloudsim-plus.git` \r\nat a terminal.\r\n- Open/import the project in your IDE:\r\n    - For NetBeans, just use the \"Open project\" menu and select the directory where the project was downloaded/cloned.\r\n    - For Eclipse or IntelliJ IDEA, \r\n      you have to import the project selecting the folder where the project was cloned. \r\n- Inside the opened/imported project you will have the cloudsim-plus and cloudsim-plus-examples modules. \r\n  The cloudsim-plus module is where the simulator source code is, that usually you don't have to change, unless you want to contribute to the project. \r\n  The cloudsim-plus-examples is where you can start.\r\n- Open the cloudsim-plus-examples module. The most basic examples are in the root of the org.cloudbus.cloudsim.examples package. \r\n  You can run any one of the classes in this package to get a specific example. \r\n- If you want to build your own simulations, the easiest way is to create another class inside this module.\r\n\r\n<p align=\"right\"><a href=\"#top\">:arrow_up:</a></p>\r\n\r\n# A minimal simulation example\r\n\r\nThe construction of a scenario to simulate the infrastructure of a Cloud provider is not so minimal. \r\nIn order to build such a simulation you have to create, at least: \r\n- a datacenter with a list of physical machines (Hosts); \r\n- a broker that allows submission of VMs and Cloudlets to be executed, on behalf of a given customer, into the cloud infrastructure; \r\n- a list of customer's virtual machines (VMs); \r\n- and a list of customer's cloudlets (objects that model resource requirements of different applications).\r\n\r\nBy this way, the main code used to build such a simulation scenario can be as below. \r\nThis is simply the code of the constructor method. \r\nThe complete example is available\r\n[here](/cloudsim-plus-examples/src/main/java/org/cloudsimplus/examples/BasicFirstExample.java),\r\ntogether with [other examples](cloudsim-plus-examples). Specific examples of CloudSim Plus, showing several\r\nnew exclusive features and advanced scenarios, can be found [here](cloudsim-plus-examples/src/main/java/org/cloudsimplus/examples/). \r\n\r\n```java\r\nthis.vmList = new ArrayList<>();\r\nthis.cloudletList = new ArrayList<>();\r\n\r\n//Creates a CloudSim object to initialize the simulation.\r\nCloudSim simulation = new CloudSim();\r\n\r\nDatacenter datacenter0 = createDatacenter(simulation);\r\n\r\n/*Creates a Broker accountable for submission of VMs and Cloudlets\r\non behalf of a given cloud user (customer).*/\r\nDatacenterBroker broker0 = new DatacenterBrokerSimple(simulation);\r\n\r\nVm vm0 = createVm(broker0);\r\nthis.vmList.add(vm0);\r\nbroker0.submitVmList(vmList);\r\n\r\n/*Creates Cloudlets that represent applications to be run inside a VM.*/\r\nCloudlet cloudlet0 = createCloudlet(broker0, vm0);\r\nthis.cloudletList.add(cloudlet0);\r\nCloudlet cloudlet1 = createCloudlet(broker0, vm0);\r\nthis.cloudletList.add(cloudlet1);\r\nbroker0.submitCloudletList(cloudletList);\r\n\r\n/*Starts the simulation and waits all cloudlets to be executed*/\r\nsimulation.start();\r\n\r\n/*Prints results when the simulation is over\r\n(you can use your own code here to print what you want from this cloudlet list)*/\r\nList<Cloudlet> finishedCloudlets = broker0.getCloudletsFinishedList();\r\nnew CloudletsTableBuilderHelper(finishedCloudlets).build();\r\nLog.printFormattedLine(\"Minimal Example finished!\");\r\n```\r\n\r\nAnd the results are more structured and clear, including the unit of some presented data, in order to allow better understanding. \r\nThe image below, for a simulation with two cloudlets (applications) gives you a preview. \r\n![Simulation Results](simulation-results.png)\r\n\r\n<p align=\"right\"><a href=\"#top\">:arrow_up:</a></p>\r\n\r\n# Documentation and Help\r\nThe project documentation originated from CloudSim was entirely updated and extended. \r\nYou can see the javadoc documentation for classes and their elements directly on your IDE.\r\n\r\nThe documentation is available online at <http://cloudsimplus.org/apidocs/>.\r\nThere is also a [Wiki page](https://github.com/manoelcampos/cloudsim-plus/wiki) with additional information such as a FAQ list.  \r\n\r\nA Google Group forum is also available at <https://groups.google.com/group/cloudsim-plus>\r\n\r\n<p align=\"right\"><a href=\"#top\">:arrow_up:</a></p>\r\n\r\n<a id=\"why-care\"></a>\r\n# Why should I care about this CloudSim fork? I just want to build my simulations. :neutral_face:\r\nWell, the design of the tool has a direct impact when you need to extend it in order to include some feature required for your simulations. \r\nThe simulator provides a set of classes such as `VmSchedulers`s, `CloudletScheduler`s, `VmAllocationPolicy`s, `ResourceProvisioner`s, \r\n`UtilizationModel`s, `PowerModel`s and `DatacenterBroker`s that implement basic algorithms for different goals. \r\nFor instance, the `VmAllocationPolicySimple` class implements a Worst Fit\r\npolicy that selects the PM wich less processor cores in use to host a VM and, in fact, it is the only policy available. \r\n\r\nUsually you have to write your own implementations of these classes, such as a Best Fit `VmAllocationPolicy`, \r\na resource `UtilizationModel` with an upper threshold or a `DatacenterBroker` that selects the best `Datacenter` to submit a VM.\r\n\r\nConsidering that, several software engineering principles aim to ease the task of creating new classes to implement those features. \r\nThey also try to avoid forcing you to change core classes of the simulator in order to introduce a feature you need to implement.\r\nChanging these core classes is a bad practice, once you will not be able to automatically update your project to new versions \r\nof the simulator, without losing your changes or struggling to fix merge conflicts.  \r\n\r\nAnd as we have seen in forums that we've attended, many times users have to perform these changes in core classes \r\njust to implement some specific features they need. \r\nBy this way, we think those problems are enough reasons that show the need of a new re-engineered version of the simulator.  \r\n\r\n<p align=\"right\"><a href=\"#top\">:arrow_up:</a></p>\r\n\r\n<a id=\"why-another-fork\"></a>\r\n# But why another CloudSim fork? :unamused:\r\nWe know what you are thinking: it would be better to pull a request to the original CloudSim repository \r\nin order to really contribute to the project, benefiting everybody.\r\n\r\nWell, we strongly agree with you and in fact we tried that. However, the original CloudSim moved on to a new major release, \r\nintroducing a completely new set of classes to provide Container as a Service (CaaS) simulations, \r\nbefore the changes proposed here being merged to the official repository. \r\nThe huge amount of contributions of CloudSim Plus are discussed in the section below. \r\nBy this way, all the work performed here was not incorporated to allow this new CaaS module to be developed using this redesigned version.\r\nAnd unfortunately, there are several months of hard work that would need to be replicated in order to merge both projects.\r\n\r\n<p align=\"right\"><a href=\"#top\">:arrow_up:</a></p>\r\n\r\n<a id=\"differences\"></a>\r\n# What are the practical differences of using CloudSim Plus instead of CloudSim? How can I update my simulations in order to use CloudSim Plus?\r\n\r\nTo update your simulations to use the new CloudSim Plus you have to change the way that some objects are instantiated, because \r\nthere were introduced some new interfaces to follow the \"program to an interface, not an implementation\" \r\nrecommendation and also to increase [abstraction](https://en.wikipedia.org/wiki/Abstraction_(software_engineering)). \r\nThese new interfaces were also crucial to implement the [Null Object Pattern](https://en.wikipedia.org/wiki/Null_Object_pattern) \r\nin order to try avoiding `NullPointerException`s.\r\n\r\nBy this way, the classes `Datacenter`, `DatacenterCharacteristics`, `Host`, `Pe`, `Vm` and `Cloudlet` were renamed due to \r\nthe introduction of interfaces with these same names. Now all these classes have a suffix *Simple* \r\n(as already defined for some previous classes such as `PeProvisionerSimple` and `VmAllocationPolicySimple`). \r\nFor instance, to instantiate a `Cloudlet` you have to execute a code such as:\r\n\r\n ```java\r\nCloudletSimple cloudlet = new CloudletSimple(required, parameters, here);\r\n```   \r\n\r\nHowever, once these interfaces were introduced in order to also enable the creation of different cloudlet classes, \r\nthe recommendation is to declare your object using the interface, not the class: \r\n \r\n ```java\r\nCloudlet cloudlet = new CloudletSimple(required, parameters, here);\r\n```   \r\n\r\nOnce the packages were reorganized, you have to adjust them. However, use your IDE to correct the imports for you.\r\n\r\nAdditionally, the interface `Storage` was renamed to `FileStorage` and its implementations are `SanStorage` and `HarddriveStorage`, that can be used as before.\r\nFinally, the way you instantiate a host has changed too. \r\nThere aren't the classes `RamProvisionerSimple` and `BwProvisionerSimple` anymore. \r\nNow you just have the generic class `ResourceProvisionerSimple`. \r\nAnd this class doesn't require a primitive value to define the resource capacity.\r\nInstead, it requires an object that implements the new `Resource` interface (such as the `Ram` and `Bandwidth` classes). \r\nBy this way, to instantiate a host you can use a code such as below:\r\n\r\n```java\r\nlong ram = 20480; //in MB\r\nlong bw = 1000000; //in Megabits/s\r\nlong storage = 1000000; //in MB\r\nHost host = new HostSimple(id, storage, pesList);\r\nhost.setRamProvisioner(new ResourceProvisionerSimple(new Ram(ram)))\r\n    .setBwProvisioner(new ResourceProvisionerSimple(new Bandwidth(bw)))\r\n    .setVmScheduler(new VmSchedulerTimeShared());\r\n``` \r\n\r\n<p align=\"right\"><a href=\"#top\">:arrow_up:</a></p>\r\n\r\n<a id=\"general-features\"></a>\r\n# General features of the simulator\r\n\r\n  * Support for modeling and simulation of large scale Cloud computing data centers.\r\n  * Support for modeling and simulation of virtualized server hosts, with customizable policies for provisioning host resources to virtual machines.\r\n  * Support for modeling and simulation of energy-aware computational resources.\r\n  * Support for modeling and simulation of data center network topologies and message-passing applications.\r\n  * Support for modeling and simulation of federated clouds.\r\n  * Support for dynamic insertion of simulation elements, stop and resume of simulation.\r\n  * Support for user-defined policies for allocation of hosts to virtual machines and policies for allocation of host resources to virtual machines.\r\n\r\n<p align=\"right\"><a href=\"#top\">:arrow_up:</a></p>\r\n\r\n<a id=\"publications\"></a>\r\n# CloudSim Plus Publications\r\n\r\n  * Coming soon.\r\n\r\n  \r\n<p align=\"right\"><a href=\"#top\">:arrow_up:</a></p>\r\n  \r\n# License\r\n\r\nThis project is licensed under [GNU GPLv3](http://www.gnu.org/licenses/gpl-3.0), as defined in CloudSim 3 source codes.\r\n\r\n<p align=\"right\"><a href=\"#top\">:arrow_up:</a></p>\r\n\r\n# Contributing\r\n\r\nIf you desire to contribute to the project, you are welcome. However, make sure to read the [contribution guide](CONTRIBUTING.md) before you start.\r\nIf you just want to request a feature, feel free to use the [issues page](https://github.com/manoelcampos/cloudsim-plus/issues).\r\n\r\n<p align=\"right\"><a href=\"#top\">:arrow_up:</a></p>\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}